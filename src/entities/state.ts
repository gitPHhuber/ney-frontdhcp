import { type InventoryState } from './inventory/types';
import { type MesState } from './mes/types';
import { type ErpState } from './erp/types';
import { type TaskState } from './tasks/types';
import { type ProductPassportState } from './product-passport/types';
import { type AutomationState } from './automation/types';
import { type WorkforceState } from './workforce/types';
import { deepClone } from './utils';

export interface EnterpriseState {
  inventory: InventoryState;
  mes: MesState;
  erp: ErpState;
  tasks: TaskState;
  passports: ProductPassportState;
  automation: AutomationState;
  workforce: WorkforceState;
}

const now = new Date();

const ciscoTemplateFields = [
  {
    id: 'tpl-field-role',
    key: 'role',
    label: 'Роль устройства',
    type: 'text' as const,
    required: true,
    defaultValue: 'Distribution switch',
  },
  {
    id: 'tpl-field-install-date',
    key: 'installDate',
    label: 'Дата ввода в эксплуатацию',
    type: 'date' as const,
    required: true,
  },
  {
    id: 'tpl-field-firmware',
    key: 'firmware',
    label: 'Текущая версия прошивки',
    type: 'text' as const,
    required: true,
    defaultValue: '17.12.4',
  },
  {
    id: 'tpl-field-power',
    key: 'powerProfile',
    label: 'Профиль питания',
    type: 'select' as const,
    options: [
      { label: 'AC (2 блока)', value: 'ac_dual' },
      { label: 'DC', value: 'dc' },
      { label: 'PoE+', value: 'poe_plus' },
    ],
    required: true,
  },
  {
    id: 'tpl-field-notes',
    key: 'notes',
    label: 'Примечания',
    type: 'multiline' as const,
  },
];

const dellTemplateFields = [
  {
    id: 'tpl-dell-os',
    key: 'osVersion',
    label: 'Операционная система',
    type: 'text' as const,
    required: true,
    defaultValue: 'ESXi 8.0',
  },
  {
    id: 'tpl-dell-cpu',
    key: 'cpuModel',
    label: 'Модель CPU',
    type: 'text' as const,
    required: true,
    defaultValue: 'Intel Xeon Gold 6430',
  },
  {
    id: 'tpl-dell-ram',
    key: 'ramGb',
    label: 'ОЗУ (ГБ)',
    type: 'number' as const,
    required: true,
    defaultValue: 256,
  },
  {
    id: 'tpl-dell-hypervisor',
    key: 'hypervisorCluster',
    label: 'Кластер гипервизора',
    type: 'text' as const,
  },
];

const seedState: EnterpriseState = {
  inventory: {
    items: [
      { id: 'item-fin-001', sku: 'FG-ROUTER-1U', name: 'Edge Router 1U', uom: 'ea', type: 'finished', unitCost: 3200 },
      { id: 'item-fin-002', sku: 'FCB-HIL', name: 'Flight Control Board', uom: 'ea', type: 'finished', unitCost: 1480 },
      { id: 'item-sub-001', sku: 'ASM-FPGA', name: 'FPGA Processing Module', uom: 'ea', type: 'subassembly', unitCost: 580 },
      { id: 'item-sub-002', sku: 'ASM-IMU', name: 'IMU Harness Assembly', uom: 'ea', type: 'subassembly', unitCost: 210 },
      { id: 'item-raw-001', sku: 'PCB-10', name: 'PCB Board 10-layer', uom: 'ea', type: 'raw', unitCost: 85 },
      { id: 'item-raw-002', sku: 'CAP-470', name: '470uF Capacitor', uom: 'ea', type: 'raw', unitCost: 1.75 },
      { id: 'item-raw-003', sku: 'MCU-H7', name: 'STM32H7 MCU', uom: 'ea', type: 'raw', unitCost: 27.5 },
      { id: 'item-raw-004', sku: 'IMU-9AX', name: '9-axis IMU Sensor', uom: 'ea', type: 'raw', unitCost: 41.5 },
    ],
    boms: [
      {
        id: 'bom-asm-fpga',
        itemId: 'item-sub-001',
        components: [
          { itemId: 'item-raw-001', qty: 1 },
          { itemId: 'item-raw-002', qty: 20 },
        ],
      },
      {
        id: 'bom-imu-harness',
        itemId: 'item-sub-002',
        components: [
          { itemId: 'item-raw-003', qty: 1 },
          { itemId: 'item-raw-004', qty: 1 },
        ],
      },
      {
        id: 'bom-router',
        itemId: 'item-fin-001',
        components: [
          { itemId: 'item-sub-001', qty: 1 },
          { itemId: 'item-raw-002', qty: 4 },
        ],
      },
      {
        id: 'bom-flight-board',
        itemId: 'item-fin-002',
        components: [
          { itemId: 'item-sub-002', qty: 1 },
          { itemId: 'item-raw-002', qty: 6 },
        ],
      },
    ],
    warehouses: [
      { id: 'wh-main', name: 'Main Plant' },
      { id: 'wh-eu', name: 'EU Fulfillment' },
    ],
    locations: [
      { id: 'loc-main-raw', warehouseId: 'wh-main', path: 'RAW/ZoneA/Bin12' },
      { id: 'loc-main-wip', warehouseId: 'wh-main', path: 'WIP/Line1/Cell3' },
      { id: 'loc-main-fg', warehouseId: 'wh-main', path: 'FG/Rack2/Shelf1' },
      { id: 'loc-eu-fg', warehouseId: 'wh-eu', path: 'FG/RowB/Bay4' },
    ],
    stockLots: [
      {
        id: 'lot-raw-001',
        itemId: 'item-raw-001',
        lotNo: 'PCB-2403A',
        qty: 120,
        locationId: 'loc-main-raw',
        status: 'available',
      },
      {
        id: 'lot-raw-002',
        itemId: 'item-raw-002',
        lotNo: 'CAP-2403',
        qty: 2500,
        locationId: 'loc-main-raw',
        status: 'available',
      },
      {
        id: 'lot-raw-003',
        itemId: 'item-raw-003',
        lotNo: 'MCU-2402',
        qty: 320,
        locationId: 'loc-main-raw',
        status: 'available',
      },
      {
        id: 'lot-raw-004',
        itemId: 'item-raw-004',
        lotNo: 'IMU-2401',
        qty: 140,
        locationId: 'loc-main-raw',
        status: 'available',
      },
      {
        id: 'lot-sub-001',
        itemId: 'item-sub-001',
        lotNo: 'FPGA-2402',
        qty: 40,
        locationId: 'loc-main-wip',
        status: 'reserved',
      },
      {
        id: 'lot-sub-002',
        itemId: 'item-sub-002',
        lotNo: 'IMU-ASM-2403',
        qty: 30,
        locationId: 'loc-main-wip',
        status: 'reserved',
      },
      {
        id: 'lot-fin-001',
        itemId: 'item-fin-001',
        lotNo: 'FG-2402',
        qty: 18,
        locationId: 'loc-main-fg',
        status: 'available',
      },
      {
        id: 'lot-fin-002',
        itemId: 'item-fin-002',
        lotNo: 'FC-2403',
        qty: 6,
        locationId: 'loc-main-wip',
        status: 'reserved',
      },
    ],
    stockMoves: [
      {
        id: 'sm-001',
        itemId: 'item-raw-001',
        qty: 10,
        fromLocationId: 'loc-main-raw',
        toLocationId: 'loc-main-wip',
        refType: 'WorkOrder',
        refId: 'wo-router-10-1',
        ts: new Date(now.getTime() - 1000 * 60 * 60).toISOString(),
        note: 'Issue PCB to line',
      },
      {
        id: 'sm-002',
        itemId: 'item-raw-003',
        qty: 12,
        fromLocationId: 'loc-main-raw',
        toLocationId: 'loc-main-wip',
        refType: 'WorkOrder',
        refId: 'wo-flight-01-1',
        ts: new Date(now.getTime() - 1000 * 60 * 80).toISOString(),
        note: 'Issue MCUs for flight control',
      },
      {
        id: 'sm-003',
        itemId: 'item-fin-001',
        qty: 5,
        fromLocationId: 'loc-main-wip',
        toLocationId: 'loc-main-fg',
        refType: 'ProductionOrder',
        refId: 'po-router-10',
        ts: new Date(now.getTime() - 1000 * 60 * 30).toISOString(),
      },
      {
        id: 'sm-004',
        itemId: 'item-fin-002',
        qty: 2,
        fromLocationId: 'loc-main-wip',
        toLocationId: 'loc-main-fg',
        refType: 'ProductionOrder',
        refId: 'po-flight-01',
        ts: new Date(now.getTime() - 1000 * 60 * 25).toISOString(),
      },
    ],
  },
  mes: {
    routings: [
      {
        id: 'routing-router',
        itemId: 'item-fin-001',
        operations: [
          { opId: 'ROUTER-ASM', seq: 10, wcId: 'wc-assembly', stdTimeMin: 45 },
          { opId: 'ROUTER-TEST', seq: 20, wcId: 'wc-test', stdTimeMin: 35 },
          { opId: 'ROUTER-PACK', seq: 30, wcId: 'wc-pack', stdTimeMin: 12 },
        ],
      },
      {
        id: 'routing-flight-control',
        itemId: 'item-fin-002',
        operations: [
          { opId: 'FC-ASM', seq: 10, wcId: 'wc-assembly', stdTimeMin: 55 },
          { opId: 'FC-CAL', seq: 20, wcId: 'wc-calibration', stdTimeMin: 25 },
          { opId: 'FC-HIL', seq: 30, wcId: 'wc-hil', stdTimeMin: 45 },
          { opId: 'FC-BURN', seq: 40, wcId: 'wc-burnin', stdTimeMin: 60 },
        ],
      },
    ],
    workCenters: [
      { id: 'wc-assembly', name: 'Assembly Line 1', capabilityTags: ['smt', 'fpga'] },
      { id: 'wc-test', name: 'Functional Test Cell', capabilityTags: ['boundary-scan'] },
      { id: 'wc-pack', name: 'Packing Cell', capabilityTags: ['labeling', 'packout'] },
      { id: 'wc-calibration', name: 'Calibration Rig', capabilityTags: ['avionics', 'calibration'] },
      { id: 'wc-hil', name: 'HIL Validation Lab', capabilityTags: ['flight-control', 'hil'] },
      { id: 'wc-burnin', name: 'Burn-in Chamber', capabilityTags: ['thermal', 'stress'] },
    ],
    productionOrders: [
      {
        id: 'po-router-10',
        itemId: 'item-fin-001',
        qty: 25,
        dueDate: new Date(now.getTime() + 1000 * 60 * 60 * 24 * 5).toISOString(),
        status: 'in-progress',
        releasedAt: new Date(now.getTime() - 1000 * 60 * 60 * 12).toISOString(),
      },
      {
        id: 'po-router-11',
        itemId: 'item-fin-001',
        qty: 15,
        dueDate: new Date(now.getTime() + 1000 * 60 * 60 * 24 * 10).toISOString(),
        status: 'released',
        releasedAt: new Date(now.getTime() - 1000 * 60 * 60 * 3).toISOString(),
      },
      {
        id: 'po-flight-01',
        itemId: 'item-fin-002',
        qty: 12,
        dueDate: new Date(now.getTime() + 1000 * 60 * 60 * 24 * 8).toISOString(),
        status: 'released',
        releasedAt: new Date(now.getTime() - 1000 * 60 * 60 * 6).toISOString(),
      },
    ],
    workOrders: [
      {
        id: 'wo-router-10-1',
        prodOrderId: 'po-router-10',
        opId: 'ROUTER-ASM',
        wcId: 'wc-assembly',
        assignee: 'alexei',
        status: 'in-progress',
        startedAt: new Date(now.getTime() - 1000 * 60 * 40).toISOString(),
      },
      {
        id: 'wo-router-10-2',
        prodOrderId: 'po-router-10',
        opId: 'ROUTER-TEST',
        wcId: 'wc-test',
        assignee: 'mila',
        status: 'planned',
      },
      {
        id: 'wo-router-11-1',
        prodOrderId: 'po-router-11',
        opId: 'ROUTER-ASM',
        wcId: 'wc-assembly',
        status: 'planned',
      },
      {
        id: 'wo-flight-01-1',
        prodOrderId: 'po-flight-01',
        opId: 'FC-ASM',
        wcId: 'wc-assembly',
        assignee: 'sergey',
        status: 'in-progress',
        startedAt: new Date(now.getTime() - 1000 * 60 * 90).toISOString(),
      },
      {
        id: 'wo-flight-01-2',
        prodOrderId: 'po-flight-01',
        opId: 'FC-CAL',
        wcId: 'wc-calibration',
        assignee: 'daria',
        status: 'planned',
      },
      {
        id: 'wo-flight-01-3',
        prodOrderId: 'po-flight-01',
        opId: 'FC-HIL',
        wcId: 'wc-hil',
        status: 'planned',
      },
      {
        id: 'wo-flight-01-4',
        prodOrderId: 'po-flight-01',
        opId: 'FC-BURN',
        wcId: 'wc-burnin',
        status: 'planned',
      },
    ],
    qualityChecks: [
      {
        id: 'qc-wo-router-10-1',
        entityType: 'WorkOrder',
        entityId: 'wo-router-10-1',
        ruleId: 'qc-solder-visual',
        status: 'pending',
        evidence: [],
      },
      {
        id: 'qc-flight-imu',
        entityType: 'WorkOrder',
        entityId: 'wo-flight-01-2',
        ruleId: 'qc-calibration',
        status: 'pending',
        evidence: [],
      },
      {
        id: 'qc-flight-hil',
        entityType: 'WorkOrder',
        entityId: 'wo-flight-01-3',
        ruleId: 'qc-hil-regression',
        status: 'blocked',
        evidence: [],
      },
    ],
    nonconformances: [
      {
        id: 'nc-router-01',
        refType: 'WorkOrder',
        refId: 'wo-router-10-1',
        severity: 'medium',
        status: 'investigating',
        action: 'Rework solder joint on board 4',
      },
      {
        id: 'nc-flight-01',
        refType: 'WorkOrder',
        refId: 'wo-flight-01-3',
        severity: 'high',
        status: 'open',
        action: 'Firmware regression blocked HIL campaign',
      },
    ],
    maintenanceOrders: [
      {
        id: 'mo-line1-01',
        assetId: 'wc-assembly',
        type: 'preventive',
        status: 'scheduled',
        schedule: new Date(now.getTime() + 1000 * 60 * 60 * 24 * 2).toISOString(),
        logs: [
          {
            id: 'mo-line1-01-log1',
            ts: new Date(now.getTime() - 1000 * 60 * 60 * 24).toISOString(),
            note: 'Lubricated conveyor chain',
            actor: 'maintenance-bot',
          },
        ],
      },
      {
        id: 'mo-hil-02',
        assetId: 'wc-hil',
        type: 'corrective',
        status: 'in-progress',
        schedule: new Date(now.getTime() + 1000 * 60 * 60 * 6).toISOString(),
        logs: [
          {
            id: 'mo-hil-02-log1',
            ts: new Date(now.getTime() - 1000 * 60 * 45).toISOString(),
            note: 'Investigating actuator jitter during HIL run',
            actor: 'maintenance-bot',
          },
        ],
      },
    ],
    productionLines: [
      {
        id: 'pl-router-a',
        name: 'Router Assembly A',
        streamId: 'stream-network',
        workCenterIds: ['wc-assembly', 'wc-test', 'wc-pack'],
        shiftPattern: '2x8',
        taktTimeSec: 420,
        targetPerShift: 12,
        currentWip: 18,
        throughputPerShift: 10,
        availability: 0.92,
        blockers: ['Awaiting lot CAP-2404'],
      },
      {
        id: 'pl-router-b',
        name: 'Router Assembly B',
        streamId: 'stream-network',
        workCenterIds: ['wc-assembly', 'wc-test', 'wc-pack'],
        shiftPattern: 'night flex',
        taktTimeSec: 480,
        targetPerShift: 9,
        currentWip: 11,
        throughputPerShift: 8,
        availability: 0.87,
        blockers: [],
      },
      {
        id: 'pl-flight',
        name: 'Flight Control Line',
        streamId: 'stream-flight-control',
        workCenterIds: ['wc-assembly', 'wc-calibration', 'wc-hil', 'wc-burnin'],
        shiftPattern: '3x8',
        taktTimeSec: 1680,
        targetPerShift: 6,
        currentWip: 14,
        throughputPerShift: 5,
        availability: 0.78,
        blockers: ['Firmware 2.4.8 sign-off pending'],
      },
    ],
    valueStreams: [
      {
        id: 'stream-network',
        name: 'Network Infrastructure',
        focus: 'Edge routers & network appliances',
        demandThisWeek: 34,
        backlogUnits: 19,
        riskLevel: 'medium',
        gatekeepers: ['network-production'],
        nextMilestone: 'Customer FAT with CityNet on Friday',
      },
      {
        id: 'stream-flight-control',
        name: 'Flight Control Electronics',
        focus: 'Autopilot & flight control boards',
        demandThisWeek: 18,
        backlogUnits: 12,
        riskLevel: 'high',
        gatekeepers: ['flight-control-lab'],
        nextMilestone: 'Qualification run with avionics QA',
      },
    ],
    testCells: [
      {
        id: 'tc-hil-01',
        name: 'HIL Rig 01',
        capability: '6-axis motion simulation',
        status: 'online',
        queueDepth: 3,
        activePlanId: 'plan-flight-hil',
        shift: 'Day A',
        operators: ['daria', 'ilya'],
      },
      {
        id: 'tc-hil-02',
        name: 'HIL Rig 02',
        capability: 'Rotorcraft dynamics',
        status: 'maintenance',
        queueDepth: 5,
        activePlanId: 'plan-flight-hil',
        shift: 'Day B',
        operators: ['sergey'],
      },
      {
        id: 'tc-burn-01',
        name: 'Thermal Burn-In Chamber',
        capability: 'Environmental stress',
        status: 'online',
        queueDepth: 2,
        activePlanId: 'plan-burnin',
        shift: 'Swing',
        operators: ['valentina'],
      },
    ],
    testPlans: [
      {
        id: 'plan-flight-hil',
        name: 'Flight Control Regression',
        coverage: 0.93,
        cycleTimeMin: 45,
        ownerTeam: 'flight-control-lab',
        requiredFor: ['item-fin-002'],
        lastValidatedAt: new Date(now.getTime() - 1000 * 60 * 60 * 20).toISOString(),
      },
      {
        id: 'plan-burnin',
        name: '48h Burn-in',
        coverage: 0.75,
        cycleTimeMin: 120,
        ownerTeam: 'environmental-test',
        requiredFor: ['item-fin-001', 'item-fin-002'],
        lastValidatedAt: new Date(now.getTime() - 1000 * 60 * 60 * 72).toISOString(),
      },
    ],
    testRuns: [
      {
        id: 'run-hil-001',
        testCellId: 'tc-hil-01',
        planId: 'plan-flight-hil',
        boardSerial: 'FCB-2403-011',
        status: 'running',
        startedAt: new Date(now.getTime() - 1000 * 60 * 20).toISOString(),
        operatorId: 'daria',
        defectsFound: 0,
      },
      {
        id: 'run-hil-002',
        testCellId: 'tc-hil-01',
        planId: 'plan-flight-hil',
        boardSerial: 'FCB-2403-010',
        status: 'failed',
        startedAt: new Date(now.getTime() - 1000 * 60 * 90).toISOString(),
        finishedAt: new Date(now.getTime() - 1000 * 60 * 40).toISOString(),
        operatorId: 'ilya',
        defectsFound: 2,
      },
      {
        id: 'run-burn-001',
        testCellId: 'tc-burn-01',
        planId: 'plan-burnin',
        boardSerial: 'ER1U-24-1011',
        status: 'queued',
        startedAt: new Date(now.getTime() - 1000 * 60 * 10).toISOString(),
        operatorId: 'valentina',
        defectsFound: 0,
      },
    ],
  },
  erp: {
    suppliers: [
      { id: 'sup-adv-components', name: 'Advanced Components Ltd', contactEmail: 'orders@advc.com' },
      { id: 'sup-global-pcb', name: 'Global PCB Works', contactEmail: 'sales@globalpcb.io' },
    ],
    customers: [
      { id: 'cust-citynet', name: 'CityNet ISP', contactEmail: 'ops@citynet.example' },
      { id: 'cust-fastfiber', name: 'FastFiber Telecom', contactEmail: 'noc@fastfiber.example' },
    ],
    purchaseOrders: [
      {
        id: 'po-2024-1045',
        supplierId: 'sup-adv-components',
        status: 'approved',
        expectedDate: new Date(now.getTime() + 1000 * 60 * 60 * 24 * 4).toISOString(),
        lines: [
          { itemId: 'item-raw-001', qty: 200, price: 95 },
          { itemId: 'item-raw-002', qty: 4000, price: 1.6 },
        ],
      },
      {
        id: 'po-2024-1046',
        supplierId: 'sup-global-pcb',
        status: 'received',
        expectedDate: new Date(now.getTime() - 1000 * 60 * 60 * 24).toISOString(),
        lines: [{ itemId: 'item-raw-001', qty: 150, price: 83 }],
      },
    ],
    salesOrders: [
      {
        id: 'so-2024-201',
        customerId: 'cust-citynet',
        status: 'approved',
        promisedDate: new Date(now.getTime() + 1000 * 60 * 60 * 24 * 7).toISOString(),
        lines: [{ itemId: 'item-fin-001', qty: 30, price: 5400 }],
      },
      {
        id: 'so-2024-202',
        customerId: 'cust-fastfiber',
        status: 'draft',
        lines: [{ itemId: 'item-fin-001', qty: 10, price: 5500 }],
      },
    ],
    invoices: [
      {
        id: 'inv-2024-501',
        partnerType: 'customer',
        partnerId: 'cust-citynet',
        lines: [
          { description: 'Edge Router 1U', qty: 10, price: 5400 },
          { description: 'Deployment services', qty: 1, price: 3500 },
        ],
        total: 3500 + 10 * 5400,
        status: 'open',
        issuedAt: new Date(now.getTime() - 1000 * 60 * 60 * 72).toISOString(),
      },
    ],
  },
  tasks: {
    tasks: [
      {
        id: 'task-001',
        title: 'Проверить поставку PO-2024-1045',
        description: 'Подтвердить количество и инициировать входной контроль комплектующих.',
        status: 'in-progress',
        priority: 'high',
        assignee: 'olga',
        tags: ['erp', 'receiving'],
        dueDate: new Date(now.getTime() + 1000 * 60 * 60 * 24).toISOString(),
        sprintId: 'sprint-current',
        productionOrderId: 'po-router-10',
      },
      {
        id: 'task-002',
        title: 'Запланировать окно обслуживания',
        description: 'Согласовать простой линии сборки №1 для профилактического обслуживания.',
        status: 'todo',
        priority: 'medium',
        tags: ['maintenance'],
        dueDate: new Date(now.getTime() + 1000 * 60 * 60 * 48).toISOString(),
        sprintId: 'sprint-current',
      },
      {
        id: 'task-003',
        title: 'Подготовить сводку KPI для руководства',
        description: 'Сопоставить производительность и спрос для отчёта руководству.',
        status: 'review',
        priority: 'high',
        assignee: 'irina',
        tags: ['reporting'],
        sprintId: 'sprint-next',
      },
    ],
    sprints: [
      {
        id: 'sprint-current',
        name: 'Sprint 12',
        start: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 3).toISOString(),
        end: new Date(now.getTime() + 1000 * 60 * 60 * 24 * 11).toISOString(),
      },
      {
        id: 'sprint-next',
        name: 'Sprint 13',
        start: new Date(now.getTime() + 1000 * 60 * 60 * 24 * 12).toISOString(),
        end: new Date(now.getTime() + 1000 * 60 * 60 * 24 * 26).toISOString(),
      },
    ],
    columns: [
      { id: 'col-backlog', title: 'Бэклог', status: 'backlog', wipLimit: 30 },
      { id: 'col-todo', title: 'К выполнению', status: 'todo', wipLimit: 10 },
      { id: 'col-progress', title: 'В работе', status: 'in-progress', wipLimit: 8 },
      { id: 'col-review', title: 'Проверка', status: 'review', wipLimit: 5 },
      { id: 'col-done', title: 'Готово', status: 'done' },
    ],
    timesheets: [
      {
        id: 'ts-001',
        userId: 'alexei',
        entityType: 'WorkOrder',
        entityId: 'wo-router-10-1',
        hours: 2.5,
        ts: new Date(now.getTime() - 1000 * 60 * 60 * 6).toISOString(),
      },
      {
        id: 'ts-002',
        userId: 'olga',
        entityType: 'Task',
        entityId: 'task-001',
        hours: 1.5,
        ts: new Date(now.getTime() - 1000 * 60 * 60 * 3).toISOString(),
      },
    ],
  },
  passports: {
    devices: [
      {
        id: 'device-ast-1001',
        assetTag: 'AST-1001',
        deviceModelId: 'model-cisco-c9500',
        serialNumber: 'SN123456789',
        ipAddress: '10.10.10.5',
        location: 'DC-West / Стойка 42',
        owner: 'Команда сетей',
        status: 'in_service',
      },
      {
        id: 'device-ast-1042',
        assetTag: 'AST-1042',
        deviceModelId: 'model-dell-r650',
        serialNumber: 'R650-2404-1042',
        ipAddress: '10.20.2.15',
        location: 'DC-East / Подрядчик зона 3',
        owner: 'Команда виртуализации',
        status: 'maintenance',
      },
      {
        id: 'device-ast-1100',
        assetTag: 'AST-1100',
        deviceModelId: 'model-juniper-srx',
        serialNumber: 'SRX-1100-99',
        ipAddress: '172.16.5.1',
        location: 'DC-West / Пограничный сегмент',
        owner: 'Команда безопасности',
        status: 'in_service',
      },
    ],
    deviceModels: [
      {
        id: 'model-cisco-c9500',
        vendor: 'Cisco',
        name: 'Cisco Catalyst 9500',
        description: 'Модульное ядро сети корпоративного датацентра.',
      },
      {
        id: 'model-dell-r650',
        vendor: 'Dell',
        name: 'Dell PowerEdge R650',
        description: 'Высокоплотный сервер виртуализации.',
      },
      {
        id: 'model-juniper-srx',
        vendor: 'Juniper',
        name: 'Juniper SRX340',
        description: 'Пограничный межсетевой экран и VPN-шлюз.',
      },
    ],
    templates: [
      {
        id: 'tpl-cisco-base-v1',
        deviceModelId: 'model-cisco-c9500',
        name: 'Cisco C9500 — базовый паспорт',
        description: 'Рекомендуемый комплект полей для паспорта ядрового коммутатора.',
        version: 1,
        isActive: true,
        createdAt: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 30).toISOString(),
        fields: ciscoTemplateFields.map(field => ({ ...field })),
      },
      {
        id: 'tpl-dell-base-v1',
        deviceModelId: 'model-dell-r650',
        name: 'Dell R650 — стандарт',
        description: 'Основные сведения для серверов виртуализации.',
        version: 1,
        isActive: true,
        createdAt: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 45).toISOString(),
        fields: dellTemplateFields.map(field => ({ ...field })),
      },
    ],
    passports: [
      {
        id: 'passport-ast-1001-v1',
        deviceId: 'device-ast-1001',
        templateId: 'tpl-cisco-base-v1',
        status: 'ready',
        version: 1,
        createdAt: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 28).toISOString(),
        updatedAt: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 2).toISOString(),
        metadata: {
          assetTag: 'AST-1001',
          modelName: 'Cisco Catalyst 9500',
          vendor: 'Cisco',
          serialNumber: 'SN123456789',
          ipAddress: '10.10.10.5',
          location: 'DC-West / Стойка 42',
          owner: 'Команда сетей',
        },
        schema: ciscoTemplateFields.map(field => ({ ...field })),
        fieldValues: {
          role: 'Distribution switch',
          installDate: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 365).toISOString().slice(0, 10),
          firmware: '17.12.4',
          powerProfile: 'ac_dual',
          notes: 'Паспорт сформирован автоматически после модернизации ядра.',
        },
        attachments: [
          {
            id: 'attachment-ast-1001-acceptance',
            name: 'Акт ввода в эксплуатацию.pdf',
            url: '/static/demo/router-datasheet.pdf',
            uploadedAt: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 27).toISOString(),
          },
        ],
        history: [
          {
            ts: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 28).toISOString(),
            action: 'draft',
            details: 'Черновик создан на основе активного шаблона.',
            actor: 'dev-admin',
          },
          {
            ts: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 2).toISOString(),
            action: 'finalize',
            details: 'Паспорт утверждён техническим директором.',
            actor: 'cto-office',
          },
        ],
      },
    ],
    deviceHistory: {
      'device-ast-1001': [
        {
          id: 'hist-ast-1001-1',
          deviceId: 'device-ast-1001',
          ts: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 400).toISOString(),
          action: 'Получено на склад',
          details: 'Принято по заказу PO-4587 в количестве 1 шт.',
          actor: 'Складской отдел',
        },
        {
          id: 'hist-ast-1001-2',
          deviceId: 'device-ast-1001',
          ts: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 365).toISOString(),
          action: 'Ввод в эксплуатацию',
          details: 'Установлено в стойку 42, порт uplink — DC-CORE-01.',
          actor: 'Команда сетей',
        },
        {
          id: 'hist-ast-1001-3',
          deviceId: 'device-ast-1001',
          ts: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 14).toISOString(),
          action: 'Обслуживание',
          details: 'Заменён вентилятор FAN2 после предупреждения датчика.',
          actor: 'Сервисный центр',
        },
      ],
      'device-ast-1042': [
        {
          id: 'hist-ast-1042-1',
          deviceId: 'device-ast-1042',
          ts: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 90).toISOString(),
          action: 'Перемещение',
          details: 'Отправлено в зону подрядчика для планового апгрейда.',
          actor: 'Команда виртуализации',
        },
      ],
      'device-ast-1100': [
        {
          id: 'hist-ast-1100-1',
          deviceId: 'device-ast-1100',
          ts: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 120).toISOString(),
          action: 'Тестирование',
          details: 'Пройдено нагрузочное тестирование IPS.',
          actor: 'SOC',
        },
        {
          id: 'hist-ast-1100-2',
          deviceId: 'device-ast-1100',
          ts: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 3).toISOString(),
          action: 'Инцидент',
          details: 'Зафиксирован всплеск CPU при анализе DDoS, включена защита.',
          actor: 'SOC',
        },
      ],
    },
  },
  automation: {
    templates: [
      {
        id: 'playbook-receiving',
        name: 'PO Receiving & Quality Intake',
        category: 'inventory',
        description: 'Automate receiving workflow including barcode print and quality sampling.',
        tags: ['erp', 'warehouse'],
        steps: [
          {
            id: 'step-verify-po',
            type: 'script',
            name: 'Verify PO status',
            command: 'scripts/erp/verify_po.ts',
          },
          {
            id: 'step-create-stock-move',
            type: 'script',
            name: 'Create stock move',
            command: 'scripts/inventory/create_move.ts',
            args: { location: 'loc-main-raw' },
          },
          {
            id: 'step-print-label',
            type: 'script',
            name: 'Print barcode labels',
            command: 'scripts/label/print.ts',
            isDryRunSupported: true,
          },
        ],
      },
      {
        id: 'playbook-release-order',
        name: 'Release Production Order',
        category: 'maintenance',
        description: 'Generate work orders, issue materials, and notify planners.',
        tags: ['mes'],
        steps: [
          { id: 'step-gen-wo', type: 'script', name: 'Generate work orders', command: 'scripts/mes/generate_wo.ts' },
          { id: 'step-notify', type: 'script', name: 'Notify planner', command: 'scripts/notify/slack.ts' },
        ],
      },
    ],
    runs: [
      {
        id: 'run-2024-5001',
        playbookId: 'playbook-receiving',
        startedAt: new Date(now.getTime() - 1000 * 60 * 15).toISOString(),
        finishedAt: new Date(now.getTime() - 1000 * 60 * 12).toISOString(),
        status: 'completed',
        runBy: 'automation-bot',
        dryRun: false,
        output: 'PO verified. Stock move created. Labels queued.',
        artifacts: [
          {
            id: 'run-2024-5001-log',
            name: 'Execution log',
            type: 'log',
            url: '/static/demo/logs/run-2024-5001.log',
          },
        ],
      },
    ],
  },
  workforce: {
    teams: [
      {
        id: 'team-network',
        name: 'Сборка сетевых устройств',
        scope: 'Edge routers и сетевые контроллеры',
        accessScopes: ['network-production'],
        headcount: 24,
        location: 'Цех 1 / Линия A',
        shiftModel: '2x8 + поддержка выходных',
      },
      {
        id: 'team-flight',
        name: 'Лаборатория flight control',
        scope: 'Платы автопилота, HIL и калибровка',
        accessScopes: ['flight-control-lab'],
        headcount: 12,
        location: 'HIL Lab / Clean room',
        shiftModel: '3 смены по 8 часов',
      },
      {
        id: 'team-quality',
        name: 'Качество и соответствие',
        scope: 'IPC аудит, FA и сертификация',
        accessScopes: ['qa-office'],
        headcount: 9,
        location: 'Quality Hub / Офис 2.18',
        shiftModel: 'Гибридная 5/2',
      },
      {
        id: 'team-maintenance',
        name: 'Инженеры обслуживания',
        scope: 'Простои, TPM и обеспечение смен',
        accessScopes: ['maintenance-core'],
        headcount: 6,
        location: 'Сервисный центр',
        shiftModel: 'Дежурства 12/24',
      },
    ],
    members: [
      {
        id: 'member-alexei',
        name: 'Алексей Иванов',
        teamId: 'team-network',
        title: 'Старший оператор SMT',
        skills: ['SMT', 'IPC-A-610', 'line-balance'],
        shift: 'Day A',
        productivityScore: 0.88,
        utilization: 0.82,
        currentLoadHours: 6.5,
        badges: ['Наставник смены'],
      },
      {
        id: 'member-mila',
        name: 'Мила Ким',
        teamId: 'team-network',
        title: 'Техник функционального теста',
        skills: ['boundary-scan', 'reporting'],
        shift: 'Swing',
        productivityScore: 0.79,
        utilization: 0.7,
        currentLoadHours: 5.1,
        badges: ['Kaizen lead'],
      },
      {
        id: 'member-daria',
        name: 'Дарья Петрова',
        teamId: 'team-flight',
        title: 'Инженер HIL стендов',
        skills: ['HIL', 'MATLAB', 'safety-case'],
        shift: 'Night',
        productivityScore: 0.91,
        utilization: 0.86,
        currentLoadHours: 7.4,
        badges: ['Root-cause expert'],
      },
      {
        id: 'member-sergey',
        name: 'Сергей Афанасьев',
        teamId: 'team-flight',
        title: 'Инженер по калибровке',
        skills: ['calibration', 'labview'],
        shift: 'Day B',
        productivityScore: 0.76,
        utilization: 0.64,
        currentLoadHours: 4.2,
        badges: ['Cross-trained'],
      },
      {
        id: 'member-irina',
        name: 'Ирина Соколова',
        teamId: 'team-quality',
        title: 'Специалист по качеству',
        skills: ['8D', 'PPAP', 'audit'],
        shift: 'Day',
        productivityScore: 0.83,
        utilization: 0.71,
        currentLoadHours: 3.8,
        badges: ['Lead auditor'],
      },
      {
        id: 'member-anton',
        name: 'Антон Власов',
        teamId: 'team-maintenance',
        title: 'Инженер TPM',
        skills: ['TPM', 'electro-mech'],
        shift: 'On-call',
        productivityScore: 0.74,
        utilization: 0.6,
        currentLoadHours: 2.5,
        badges: ['CMMS curator'],
      },
    ],
    assignments: [
      {
        id: 'assign-wo-router-10-1',
        memberId: 'member-alexei',
        entityType: 'WorkOrder',
        entityId: 'wo-router-10-1',
        status: 'active',
        effortHours: 6,
        startedAt: new Date(now.getTime() - 1000 * 60 * 40).toISOString(),
      },
      {
        id: 'assign-wo-router-10-2',
        memberId: 'member-mila',
        entityType: 'WorkOrder',
        entityId: 'wo-router-10-2',
        status: 'planned',
        effortHours: 4,
        dueAt: new Date(now.getTime() + 1000 * 60 * 120).toISOString(),
      },
      {
        id: 'assign-hil-001',
        memberId: 'member-daria',
        entityType: 'TestRun',
        entityId: 'run-hil-001',
        status: 'active',
        effortHours: 1.5,
        startedAt: new Date(now.getTime() - 1000 * 60 * 20).toISOString(),
      },
      {
        id: 'assign-calibration',
        memberId: 'member-sergey',
        entityType: 'WorkOrder',
        entityId: 'wo-flight-01-2',
        status: 'planned',
        effortHours: 5,
        dueAt: new Date(now.getTime() + 1000 * 60 * 60 * 8).toISOString(),
      },
      {
        id: 'assign-quality-report',
        memberId: 'member-irina',
        entityType: 'Task',
        entityId: 'task-003',
        status: 'active',
        effortHours: 3,
        startedAt: new Date(now.getTime() - 1000 * 60 * 90).toISOString(),
      },
      {
        id: 'assign-maintenance',
        memberId: 'member-anton',
        entityType: 'WorkOrder',
        entityId: 'mo-hil-02',
        status: 'active',
        effortHours: 2,
        startedAt: new Date(now.getTime() - 1000 * 60 * 50).toISOString(),
      },
    ],
    utilization: [
      {
        id: 'util-network',
        teamId: 'team-network',
        weekStart: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 3).toISOString(),
        actual: 0.84,
        target: 0.8,
        overtimeHours: 4,
      },
      {
        id: 'util-flight',
        teamId: 'team-flight',
        weekStart: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 3).toISOString(),
        actual: 0.73,
        target: 0.78,
        overtimeHours: 6,
      },
      {
        id: 'util-quality',
        teamId: 'team-quality',
        weekStart: new Date(now.getTime() - 1000 * 60 * 60 * 24 * 3).toISOString(),
        actual: 0.68,
        target: 0.7,
        overtimeHours: 1,
      },
    ],
    performance: [
      {
        memberId: 'member-alexei',
        completedThisWeek: 42,
        avgCycleTimeMin: 11,
        firstPassYield: 0.97,
        labourEfficiency: 0.91,
      },
      {
        memberId: 'member-daria',
        completedThisWeek: 8,
        avgCycleTimeMin: 47,
        firstPassYield: 0.88,
        labourEfficiency: 0.87,
      },
      {
        memberId: 'member-irina',
        completedThisWeek: 5,
        avgCycleTimeMin: 35,
        firstPassYield: 0.99,
        labourEfficiency: 0.82,
      },
      {
        memberId: 'member-anton',
        completedThisWeek: 9,
        avgCycleTimeMin: 62,
        firstPassYield: 0.92,
        labourEfficiency: 0.78,
      },
    ],
    reports: [
      {
        id: 'report-weekly',
        label: 'Еженедельный отчёт по производству',
        generatedAt: new Date(now.getTime() - 1000 * 60 * 15).toISOString(),
        ownerTeam: 'operations-office',
        highlights: [
          '10% рост выпуска по сети благодаря снижению переналадок',
          'HIL линия ожидает релиз прошивки 2.4.8 для завершения цикла',
        ],
      },
      {
        id: 'report-flight',
        label: 'Отчёт по Flight Control',
        generatedAt: new Date(now.getTime() - 1000 * 60 * 60 * 6).toISOString(),
        ownerTeam: 'flight-control-lab',
        highlights: [
          'Первый проход 88% — требуется повторная прогонка тест-плана',
          'Расписание смен скорректировано для покрытия ночного окна',
        ],
      },
    ],
  },
};

export const enterpriseState: EnterpriseState = deepClone(seedState);

export const resetEnterpriseState = () => {
  const snapshot = deepClone(seedState);
  enterpriseState.inventory = snapshot.inventory;
  enterpriseState.mes = snapshot.mes;
  enterpriseState.erp = snapshot.erp;
  enterpriseState.tasks = snapshot.tasks;
  enterpriseState.passports = snapshot.passports;
  enterpriseState.automation = snapshot.automation;
  enterpriseState.workforce = snapshot.workforce;
};
